/*
 * Copyright (c) 2021-24 Marco Maccaferri and others.
 * All rights reserved.
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

package com.maccasoft.propeller.spin2;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

import com.maccasoft.propeller.CompilerException;
import com.maccasoft.propeller.model.Node;
import com.maccasoft.propeller.model.Parser;
import com.maccasoft.propeller.model.SourceProvider;

class Spin2CompilerTest {

    @Test
    void testObjectLink() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    a := 1\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       14 00 00 00    Object \"text2.spin2\" @ $00014\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       14 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     a := 1\n"
            + "00011 00011       A2             CONSTANT (1)\n"
            + "00012 00012       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "00013 00013       04             RETURN\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00014 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "00018 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "0001C 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "0001D 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0001E 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "0001F 0000B       8A             ADD\n"
            + "00020 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "00021 0000D       04             RETURN\n"
            + "00022 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectConstant() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    a := o.CONSTANT\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "CON\n"
            + "\n"
            + "    CONSTANT = 1\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       14 00 00 00    Object \"text2.spin2\" @ $00014\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       14 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     a := o.CONSTANT\n"
            + "00011 00011       A2             CONSTANT (1)\n"
            + "00012 00012       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "00013 00013       04             RETURN\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectVariablesLink() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long b\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o : \"text1\"\n"
            + "    p : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    a := 1\n"
            + "\n"
            + "");
        sources.put("text1.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long d, e\n"
            + "\n"
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long d, e, f, g\n"
            + "\n"
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 8)\n"
            + "00000 00000       1C 00 00 00    Object \"text1.spin2\" @ $0001C\n"
            + "00004 00004       08 00 00 00    Variables @ $00008\n"
            + "00008 00008       2C 00 00 00    Object \"text2.spin2\" @ $0002C\n"
            + "0000C 0000C       14 00 00 00    Variables @ $00014\n"
            + "00010 00010       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00014 00014       1C 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00018 00018       01             (stack size)\n"
            + "'     a := 1\n"
            + "00019 00019       A2             CONSTANT (1)\n"
            + "0001A 0001A       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "0001B 0001B       04             RETURN\n"
            + "' Object \"text1.spin2\" header (var size 12)\n"
            + "0001C 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "00020 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00024 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00025 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00026 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00027 0000B       8A             ADD\n"
            + "00028 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "00029 0000D       04             RETURN\n"
            + "0002A 0000E       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 20)\n"
            + "0002C 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "00030 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00034 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00035 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00036 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00037 0000B       8A             ADD\n"
            + "00038 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "00039 0000D       04             RETURN\n"
            + "0003A 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectMethod() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    o.start(1, 2)\n"
            + "    \\o.start(3, 4)\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       20 00 00 00    Object \"text2.spin2\" @ $00020\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       1E 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     o.start(1, 2)\n"
            + "00011 00011       00             ANCHOR\n"
            + "00012 00012       A2             CONSTANT (1)\n"
            + "00013 00013       A3             CONSTANT (2)\n"
            + "00014 00014       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "'     \\o.start(3, 4)\n"
            + "00017 00017       02             ANCHOR_TRAP\n"
            + "00018 00018       A4             CONSTANT (3)\n"
            + "00019 00019       A5             CONSTANT (4)\n"
            + "0001A 0001A       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "0001D 0001D       04             RETURN\n"
            + "0001E 0001E       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00020 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "00024 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00028 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00029 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0002A 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "0002B 0000B       8A             ADD\n"
            + "0002C 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "0002D 0000D       04             RETURN\n"
            + "0002E 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectMethodDefaultArgument() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    o.start(1)\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b = 2) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 00    Object \"text2.spin2\" @ $00018\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       18 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     o.start(1)\n"
            + "00011 00011       00             ANCHOR\n"
            + "00012 00012       A2             CONSTANT (1)\n"
            + "00013 00013       A3             CONSTANT (2)\n"
            + "00014 00014       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "00017 00017       04             RETURN\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00018 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "0001C 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b = 2) | c\n"
            + "00020 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00021 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00022 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00023 0000B       8A             ADD\n"
            + "00024 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "00025 0000D       04             RETURN\n"
            + "00026 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectMethodDefaultArgumentOverride() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    o.start(1, 3)\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b = 2) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 00    Object \"text2.spin2\" @ $00018\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       18 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     o.start(1, 3)\n"
            + "00011 00011       00             ANCHOR\n"
            + "00012 00012       A2             CONSTANT (1)\n"
            + "00013 00013       A4             CONSTANT (3)\n"
            + "00014 00014       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "00017 00017       04             RETURN\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00018 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "0001C 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b = 2) | c\n"
            + "00020 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00021 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00022 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00023 0000B       8A             ADD\n"
            + "00024 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "00025 0000D       04             RETURN\n"
            + "00026 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectMethodReturnListAsArguments() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    function1(a, o.function2())\n"
            + "\n"
            + "PUB function1(p1, p2 , p3)\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB function2() : r1, r2\n"
            + "\n"
            + "    r1 := 1\n"
            + "    r2 := 2\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       20 00 00 00    Object \"text2.spin2\" @ $00020\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       14 00 00 80    Method main @ $00014 (0 parameters, 0 returns)\n"
            + "0000C 0000C       1E 00 00 83    Method function1 @ $0001E (3 parameters, 0 returns)\n"
            + "00010 00010       20 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00014 00014       01             (stack size)\n"
            + "'     function1(a, o.function2())\n"
            + "00015 00015       00             ANCHOR\n"
            + "00016 00016       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00017 00017       01             ANCHOR\n"
            + "00018 00018       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "0001B 0001B       0A 03          CALL_SUB (3)\n"
            + "0001D 0001D       04             RETURN\n"
            + "' PUB function1(p1, p2 , p3)\n"
            + "0001E 0001E       00             (stack size)\n"
            + "0001F 0001F       04             RETURN\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00020 00000       08 00 20 80    Method function2 @ $00008 (0 parameters, 2 returns)\n"
            + "00024 00004       0E 00 00 00    End\n"
            + "' PUB function2() : r1, r2\n"
            + "00028 00008       00             (stack size)\n"
            + "'     r1 := 1\n"
            + "00029 00009       A2             CONSTANT (1)\n"
            + "0002A 0000A       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "'     r2 := 2\n"
            + "0002B 0000B       A3             CONSTANT (2)\n"
            + "0002C 0000C       F1             VAR_WRITE LONG DBASE+$00001 (short)\n"
            + "0002D 0000D       04             RETURN\n"
            + "0002E 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectMethodReturnListAsArguments2() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    o.function1(a, o.function2())\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB function1(p1, p2 , p3)\n"
            + "\n"
            + "PUB function2() : r1, r2\n"
            + "\n"
            + "    r1 := 1\n"
            + "    r2 := 2\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       1C 00 00 00    Object \"text2.spin2\" @ $0001C\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       1B 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     o.function1(a, o.function2())\n"
            + "00011 00011       00             ANCHOR\n"
            + "00012 00012       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00013 00013       01             ANCHOR\n"
            + "00014 00014       08 00 01       CALL_OBJ_SUB (0.1)\n"
            + "00017 00017       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "0001A 0001A       04             RETURN\n"
            + "0001B 0001B       00             Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "0001C 00000       0C 00 00 83    Method function1 @ $0000C (3 parameters, 0 returns)\n"
            + "00020 00004       0E 00 20 80    Method function2 @ $0000E (0 parameters, 2 returns)\n"
            + "00024 00008       14 00 00 00    End\n"
            + "' PUB function1(p1, p2 , p3)\n"
            + "00028 0000C       00             (stack size)\n"
            + "00029 0000D       04             RETURN\n"
            + "' PUB function2() : r1, r2\n"
            + "0002A 0000E       00             (stack size)\n"
            + "'     r1 := 1\n"
            + "0002B 0000F       A2             CONSTANT (1)\n"
            + "0002C 00010       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "'     r2 := 2\n"
            + "0002D 00011       A3             CONSTANT (2)\n"
            + "0002E 00012       F1             VAR_WRITE LONG DBASE+$00001 (short)\n"
            + "0002F 00013       04             RETURN\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectMethodPointer() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    a := @o.start\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 00    Object \"text2.spin2\" @ $00018\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       16 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     a := @o.start\n"
            + "00011 00011       0F 00 00       OBJ_SUB_ADDRESS (0.0)\n"
            + "00014 00014       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "00015 00015       04             RETURN\n"
            + "00016 00016       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00018 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "0001C 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00020 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00021 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00022 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00023 0000B       8A             ADD\n"
            + "00024 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "00025 0000D       04             RETURN\n"
            + "00026 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectMethodPointerAsArgument() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o[2] : \"text2\"\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "    o[0].set(@method)\n"
            + "    o[1].set(@method)\n"
            + "\n"
            + "PUB method(x, y)\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB set(ptr) | a\n"
            + "\n"
            + "    a := ptr\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       30 00 00 00    Object \"text2.spin2\" @ $00030\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       30 00 00 00    Object \"text2.spin2\" @ $00030\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       1C 00 00 80    Method main @ $0001C (0 parameters, 0 returns)\n"
            + "00014 00014       2C 00 00 82    Method method @ $0002C (2 parameters, 0 returns)\n"
            + "00018 00018       2E 00 00 00    End\n"
            + "' PUB main()\n"
            + "0001C 0001C       00             (stack size)\n"
            + "'     o[0].set(@method)\n"
            + "0001D 0001D       00             ANCHOR\n"
            + "0001E 0001E       11 05          SUB_ADDRESS (5)\n"
            + "00020 00020       A1             CONSTANT (0)\n"
            + "00021 00021       09 00 00       CALL_OBJ_SUB (0.0) (indexed)\n"
            + "'     o[1].set(@method)\n"
            + "00024 00024       00             ANCHOR\n"
            + "00025 00025       11 05          SUB_ADDRESS (5)\n"
            + "00027 00027       A2             CONSTANT (1)\n"
            + "00028 00028       09 00 00       CALL_OBJ_SUB (0.0) (indexed)\n"
            + "0002B 0002B       04             RETURN\n"
            + "' PUB method(x, y)\n"
            + "0002C 0002C       00             (stack size)\n"
            + "0002D 0002D       04             RETURN\n"
            + "0002E 0002E       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00030 00000       08 00 00 81    Method set @ $00008 (1 parameters, 0 returns)\n"
            + "00034 00004       0C 00 00 00    End\n"
            + "' PUB set(ptr) | a\n"
            + "00038 00008       01             (stack size)\n"
            + "'     a := ptr\n"
            + "00039 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0003A 0000A       F1             VAR_WRITE LONG DBASE+$00001 (short)\n"
            + "0003B 0000B       04             RETURN\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testNestedObjectsLink() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long a\n"
            + "    byte b\n"
            + "    word c\n"
            + "    long d\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    t1 : \"text1\"\n"
            + "    t2 : \"text2\"\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "    a := 1\n"
            + "    b := 2\n"
            + "    c := 3\n"
            + "    d := 4\n"
            + "");
        sources.put("text1.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    t3 : \"text3\"\n"
            + "\n"
            + "VAR\n"
            + "\n"
            + "    long a1\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "    a1 := 5\n"
            + "");
        sources.put("text2.spin2", ""
            + "VAR\n"
            + "\n"
            + "    word a2\n"
            + "    word b2\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "    a2 := 6\n"
            + "    b2 := 7\n"
            + "");
        sources.put("text3.spin2", ""
            + "VAR\n"
            + "\n"
            + "    byte a3\n"
            + "    long b3\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "    a3 := 8\n"
            + "    b3 := 9\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 16)\n"
            + "00000 00000       2C 00 00 00    Object \"text1.spin2\" @ $0002C\n"
            + "00004 00004       10 00 00 00    Variables @ $00010\n"
            + "00008 00008       58 00 00 00    Object \"text2.spin2\" @ $00058\n"
            + "0000C 0000C       24 00 00 00    Variables @ $00024\n"
            + "00010 00010       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00014 00014       29 00 00 00    End\n"
            + "' PUB main()\n"
            + "00018 00018       00             (stack size)\n"
            + "'     a := 1\n"
            + "00019 00019       A2             CONSTANT (1)\n"
            + "0001A 0001A       C1 81          VAR_WRITE LONG VBASE+$00001 (short)\n"
            + "'     b := 2\n"
            + "0001C 0001C       A3             CONSTANT (2)\n"
            + "0001D 0001D       52 08 81       VAR_WRITE BYTE VBASE+$00008\n"
            + "'     c := 3\n"
            + "00020 00020       A4             CONSTANT (3)\n"
            + "00021 00021       58 09 81       VAR_WRITE WORD VBASE+$00009\n"
            + "'     d := 4\n"
            + "00024 00024       A5             CONSTANT (4)\n"
            + "00025 00025       5E 0B 81       VAR_WRITE LONG VBASE+$0000B\n"
            + "00028 00028       04             RETURN\n"
            + "00029 00029       00 00 00       Padding\n"
            + "' Object \"text1.spin2\" header (var size 20)\n"
            + "0002C 00000       18 00 00 00    Object \"text3.spin2\" @ $00018\n"
            + "00030 00004       08 00 00 00    Variables @ $00008\n"
            + "00034 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "00038 0000C       15 00 00 00    End\n"
            + "' PUB main()\n"
            + "0003C 00010       00             (stack size)\n"
            + "'     a1 := 5\n"
            + "0003D 00011       A6             CONSTANT (5)\n"
            + "0003E 00012       C1 81          VAR_WRITE LONG VBASE+$00001 (short)\n"
            + "00040 00014       04             RETURN\n"
            + "00041 00015       00 00 00       Padding\n"
            + "' Object \"text3.spin2\" header (var size 12)\n"
            + "00044 00000       08 00 00 80    Method main @ $00008 (0 parameters, 0 returns)\n"
            + "00048 00004       12 00 00 00    End\n"
            + "' PUB main()\n"
            + "0004C 00008       00             (stack size)\n"
            + "'     a3 := 8\n"
            + "0004D 00009       A9             CONSTANT (8)\n"
            + "0004E 0000A       52 04 81       VAR_WRITE BYTE VBASE+$00004\n"
            + "'     b3 := 9\n"
            + "00051 0000D       AA             CONSTANT (9)\n"
            + "00052 0000E       5E 05 81       VAR_WRITE LONG VBASE+$00005\n"
            + "00055 00011       04             RETURN\n"
            + "00056 00012       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 8)\n"
            + "00058 00000       08 00 00 80    Method main @ $00008 (0 parameters, 0 returns)\n"
            + "0005C 00004       12 00 00 00    End\n"
            + "' PUB main()\n"
            + "00060 00008       00             (stack size)\n"
            + "'     a2 := 6\n"
            + "00061 00009       A7             CONSTANT (6)\n"
            + "00062 0000A       58 04 81       VAR_WRITE WORD VBASE+$00004\n"
            + "'     b2 := 7\n"
            + "00065 0000D       A8             CONSTANT (7)\n"
            + "00066 0000E       58 06 81       VAR_WRITE WORD VBASE+$00006\n"
            + "00069 00011       04             RETURN\n"
            + "0006A 00012       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testDuplicatedObjectLink() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long b\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o1 : \"object1\"\n"
            + "    o2 : \"object1\"\n"
            + "    o3 : \"object2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    o1.function(1)\n"
            + "    o2.function(2)\n"
            + "    o3.function(3)\n"
            + "");
        sources.put("object1.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long d\n"
            + "    long e\n"
            + "\n"
            + "PUB function(a) : r\n"
            + "\n"
            + "    return a + d * e\n"
            + "");
        sources.put("object2.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long d\n"
            + "\n"
            + "PUB function(a) : r | b, c\n"
            + "\n"
            + "    return (a + b * c) * d\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 8)\n"
            + "00000 00000       34 00 00 00    Object \"object1.spin2\" @ $00034\n"
            + "00004 00004       08 00 00 00    Variables @ $00008\n"
            + "00008 00008       34 00 00 00    Object \"object1.spin2\" @ $00034\n"
            + "0000C 0000C       14 00 00 00    Variables @ $00014\n"
            + "00010 00010       48 00 00 00    Object \"object2.spin2\" @ $00048\n"
            + "00014 00014       20 00 00 00    Variables @ $00020\n"
            + "00018 00018       20 00 00 80    Method main @ $00020 (0 parameters, 0 returns)\n"
            + "0001C 0001C       31 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00020 00020       01             (stack size)\n"
            + "'     o1.function(1)\n"
            + "00021 00021       00             ANCHOR\n"
            + "00022 00022       A2             CONSTANT (1)\n"
            + "00023 00023       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "'     o2.function(2)\n"
            + "00026 00026       00             ANCHOR\n"
            + "00027 00027       A3             CONSTANT (2)\n"
            + "00028 00028       08 01 00       CALL_OBJ_SUB (1.0)\n"
            + "'     o3.function(3)\n"
            + "0002B 0002B       00             ANCHOR\n"
            + "0002C 0002C       A4             CONSTANT (3)\n"
            + "0002D 0002D       08 02 00       CALL_OBJ_SUB (2.0)\n"
            + "00030 00030       04             RETURN\n"
            + "00031 00031       00 00 00       Padding\n"
            + "' Object \"object1.spin2\" header (var size 12)\n"
            + "00034 00000       08 00 10 81    Method function @ $00008 (1 parameters, 1 returns)\n"
            + "00038 00004       12 00 00 00    End\n"
            + "' PUB function(a) : r\n"
            + "0003C 00008       00             (stack size)\n"
            + "'     return a + d * e\n"
            + "0003D 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0003E 0000A       C1 80          VAR_READ LONG VBASE+$00001 (short)\n"
            + "00040 0000C       C2 80          VAR_READ LONG VBASE+$00002 (short)\n"
            + "00042 0000E       96             MULTIPLY\n"
            + "00043 0000F       8A             ADD\n"
            + "00044 00010       05             RETURN\n"
            + "00045 00011       04             RETURN\n"
            + "00046 00012       00 00          Padding\n"
            + "' Object \"object2.spin2\" header (var size 8)\n"
            + "00048 00000       08 00 10 81    Method function @ $00008 (1 parameters, 1 returns)\n"
            + "0004C 00004       13 00 00 00    End\n"
            + "' PUB function(a) : r | b, c\n"
            + "00050 00008       02             (stack size)\n"
            + "'     return (a + b * c) * d\n"
            + "00051 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00052 0000A       E2             VAR_READ LONG DBASE+$00002 (short)\n"
            + "00053 0000B       E3             VAR_READ LONG DBASE+$00003 (short)\n"
            + "00054 0000C       96             MULTIPLY\n"
            + "00055 0000D       8A             ADD\n"
            + "00056 0000E       C1 80          VAR_READ LONG VBASE+$00001 (short)\n"
            + "00058 00010       96             MULTIPLY\n"
            + "00059 00011       05             RETURN\n"
            + "0005A 00012       04             RETURN\n"
            + "0005B 00013       00             Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testNestedDuplicatedObjectLink() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long b\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o1 : \"object1\"\n"
            + "    o2 : \"object1\"\n"
            + "    o3 : \"object2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    o1.function(1)\n"
            + "    o2.function(2)\n"
            + "    o3.function(3)\n"
            + "");
        sources.put("object1.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long d\n"
            + "    long e\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o3 : \"object2\"\n"
            + "\n"
            + "PUB function(a) : r\n"
            + "\n"
            + "    e := o3.function(3)\n"
            + "    return a + d * e\n"
            + "");
        sources.put("object2.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long d\n"
            + "\n"
            + "PUB function(a) : r | b, c\n"
            + "\n"
            + "    return (a + b * c) * d\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 8)\n"
            + "00000 00000       34 00 00 00    Object \"object1.spin2\" @ $00034\n"
            + "00004 00004       08 00 00 00    Variables @ $00008\n"
            + "00008 00008       34 00 00 00    Object \"object1.spin2\" @ $00034\n"
            + "0000C 0000C       1C 00 00 00    Variables @ $0001C\n"
            + "00010 00010       58 00 00 00    Object \"object2.spin2\" @ $00058\n"
            + "00014 00014       30 00 00 00    Variables @ $00030\n"
            + "00018 00018       20 00 00 80    Method main @ $00020 (0 parameters, 0 returns)\n"
            + "0001C 0001C       31 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00020 00020       01             (stack size)\n"
            + "'     o1.function(1)\n"
            + "00021 00021       00             ANCHOR\n"
            + "00022 00022       A2             CONSTANT (1)\n"
            + "00023 00023       08 00 02       CALL_OBJ_SUB (0.2)\n"
            + "'     o2.function(2)\n"
            + "00026 00026       00             ANCHOR\n"
            + "00027 00027       A3             CONSTANT (2)\n"
            + "00028 00028       08 01 02       CALL_OBJ_SUB (1.2)\n"
            + "'     o3.function(3)\n"
            + "0002B 0002B       00             ANCHOR\n"
            + "0002C 0002C       A4             CONSTANT (3)\n"
            + "0002D 0002D       08 02 00       CALL_OBJ_SUB (2.0)\n"
            + "00030 00030       04             RETURN\n"
            + "00031 00031       00 00 00       Padding\n"
            + "' Object \"object1.spin2\" header (var size 20)\n"
            + "00034 00000       24 00 00 00    Object \"object2.spin2\" @ $00024\n"
            + "00038 00004       0C 00 00 00    Variables @ $0000C\n"
            + "0003C 00008       10 00 10 81    Method function @ $00010 (1 parameters, 1 returns)\n"
            + "00040 0000C       21 00 00 00    End\n"
            + "' PUB function(a) : r\n"
            + "00044 00010       00             (stack size)\n"
            + "'     e := o3.function(3)\n"
            + "00045 00011       01             ANCHOR\n"
            + "00046 00012       A4             CONSTANT (3)\n"
            + "00047 00013       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "0004A 00016       C2 81          VAR_WRITE LONG VBASE+$00002 (short)\n"
            + "'     return a + d * e\n"
            + "0004C 00018       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0004D 00019       C1 80          VAR_READ LONG VBASE+$00001 (short)\n"
            + "0004F 0001B       C2 80          VAR_READ LONG VBASE+$00002 (short)\n"
            + "00051 0001D       96             MULTIPLY\n"
            + "00052 0001E       8A             ADD\n"
            + "00053 0001F       05             RETURN\n"
            + "00054 00020       04             RETURN\n"
            + "00055 00021       00 00 00       Padding\n"
            + "' Object \"object2.spin2\" header (var size 8)\n"
            + "00058 00000       08 00 10 81    Method function @ $00008 (1 parameters, 1 returns)\n"
            + "0005C 00004       13 00 00 00    End\n"
            + "' PUB function(a) : r | b, c\n"
            + "00060 00008       02             (stack size)\n"
            + "'     return (a + b * c) * d\n"
            + "00061 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00062 0000A       E2             VAR_READ LONG DBASE+$00002 (short)\n"
            + "00063 0000B       E3             VAR_READ LONG DBASE+$00003 (short)\n"
            + "00064 0000C       96             MULTIPLY\n"
            + "00065 0000D       8A             ADD\n"
            + "00066 0000E       C1 80          VAR_READ LONG VBASE+$00001 (short)\n"
            + "00068 00010       96             MULTIPLY\n"
            + "00069 00011       05             RETURN\n"
            + "0006A 00012       04             RETURN\n"
            + "0006B 00013       00             Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testNestedChildDuplicatedObjectLink() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long b\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o1 : \"object1\"\n"
            + "    o2 : \"object2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    o1.function(1)\n"
            + "    o2.function(2)\n"
            + "");
        sources.put("object1.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long d\n"
            + "    long e\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o3 : \"object3\"\n"
            + "\n"
            + "PUB function(a) : r\n"
            + "\n"
            + "    e := o3.function(4)\n"
            + "    return a + d * e\n"
            + "");
        sources.put("object2.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long d\n"
            + "    long e\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o3 : \"object3\"\n"
            + "\n"
            + "PUB function(a) : r | b, c\n"
            + "\n"
            + "    e := o3.function(5)\n"
            + "    return a + d / e\n"
            + "");
        sources.put("object3.spin2", ""
            + "VAR\n"
            + "\n"
            + "    long d\n"
            + "\n"
            + "PUB function(a) : r | b, c\n"
            + "\n"
            + "    return (a + b * c) * d\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 8)\n"
            + "00000 00000       24 00 00 00    Object \"object1.spin2\" @ $00024\n"
            + "00004 00004       08 00 00 00    Variables @ $00008\n"
            + "00008 00008       48 00 00 00    Object \"object2.spin2\" @ $00048\n"
            + "0000C 0000C       1C 00 00 00    Variables @ $0001C\n"
            + "00010 00010       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00014 00014       24 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00018 00018       01             (stack size)\n"
            + "'     o1.function(1)\n"
            + "00019 00019       00             ANCHOR\n"
            + "0001A 0001A       A2             CONSTANT (1)\n"
            + "0001B 0001B       08 00 02       CALL_OBJ_SUB (0.2)\n"
            + "'     o2.function(2)\n"
            + "0001E 0001E       00             ANCHOR\n"
            + "0001F 0001F       A3             CONSTANT (2)\n"
            + "00020 00020       08 01 02       CALL_OBJ_SUB (1.2)\n"
            + "00023 00023       04             RETURN\n"
            + "' Object \"object1.spin2\" header (var size 20)\n"
            + "00024 00000       48 00 00 00    Object \"object3.spin2\" @ $00048\n"
            + "00028 00004       0C 00 00 00    Variables @ $0000C\n"
            + "0002C 00008       10 00 10 81    Method function @ $00010 (1 parameters, 1 returns)\n"
            + "00030 0000C       21 00 00 00    End\n"
            + "' PUB function(a) : r\n"
            + "00034 00010       00             (stack size)\n"
            + "'     e := o3.function(4)\n"
            + "00035 00011       01             ANCHOR\n"
            + "00036 00012       A5             CONSTANT (4)\n"
            + "00037 00013       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "0003A 00016       C2 81          VAR_WRITE LONG VBASE+$00002 (short)\n"
            + "'     return a + d * e\n"
            + "0003C 00018       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0003D 00019       C1 80          VAR_READ LONG VBASE+$00001 (short)\n"
            + "0003F 0001B       C2 80          VAR_READ LONG VBASE+$00002 (short)\n"
            + "00041 0001D       96             MULTIPLY\n"
            + "00042 0001E       8A             ADD\n"
            + "00043 0001F       05             RETURN\n"
            + "00044 00020       04             RETURN\n"
            + "00045 00021       00 00 00       Padding\n"
            + "' Object \"object2.spin2\" header (var size 20)\n"
            + "00048 00000       24 00 00 00    Object \"object3.spin2\" @ $00024\n"
            + "0004C 00004       0C 00 00 00    Variables @ $0000C\n"
            + "00050 00008       10 00 10 81    Method function @ $00010 (1 parameters, 1 returns)\n"
            + "00054 0000C       21 00 00 00    End\n"
            + "' PUB function(a) : r | b, c\n"
            + "00058 00010       02             (stack size)\n"
            + "'     e := o3.function(5)\n"
            + "00059 00011       01             ANCHOR\n"
            + "0005A 00012       A6             CONSTANT (5)\n"
            + "0005B 00013       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "0005E 00016       C2 81          VAR_WRITE LONG VBASE+$00002 (short)\n"
            + "'     return a + d / e\n"
            + "00060 00018       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00061 00019       C1 80          VAR_READ LONG VBASE+$00001 (short)\n"
            + "00063 0001B       C2 80          VAR_READ LONG VBASE+$00002 (short)\n"
            + "00065 0001D       97             DIVIDE\n"
            + "00066 0001E       8A             ADD\n"
            + "00067 0001F       05             RETURN\n"
            + "00068 00020       04             RETURN\n"
            + "00069 00021       00 00 00       Padding\n"
            + "' Object \"object3.spin2\" header (var size 8)\n"
            + "0006C 00000       08 00 10 81    Method function @ $00008 (1 parameters, 1 returns)\n"
            + "00070 00004       13 00 00 00    End\n"
            + "' PUB function(a) : r | b, c\n"
            + "00074 00008       02             (stack size)\n"
            + "'     return (a + b * c) * d\n"
            + "00075 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00076 0000A       E2             VAR_READ LONG DBASE+$00002 (short)\n"
            + "00077 0000B       E3             VAR_READ LONG DBASE+$00003 (short)\n"
            + "00078 0000C       96             MULTIPLY\n"
            + "00079 0000D       8A             ADD\n"
            + "0007A 0000E       C1 80          VAR_READ LONG VBASE+$00001 (short)\n"
            + "0007C 00010       96             MULTIPLY\n"
            + "0007D 00011       05             RETURN\n"
            + "0007E 00012       04             RETURN\n"
            + "0007F 00013       00             Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testCircularReference1() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o1 : \"object1\"\n"
            + "    o2 : \"object2\"\n"
            + "\n"
            + "");
        sources.put("object1.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o3 : \"object2\"\n"
            + "\n"
            + "");
        sources.put("object2.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o4 : \"main\"\n"
            + "\n"
            + "");

        Assertions.assertThrows(CompilerException.class, () -> {
            compile("main.spin2", sources);
        });
    }

    @Test
    void testCircularReference2() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o1 : \"object1\"\n"
            + "\n"
            + "");
        sources.put("object1.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o3 : \"object2\"\n"
            + "\n"
            + "");
        sources.put("object2.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o4 : \"main\"\n"
            + "\n"
            + "");

        Assertions.assertThrows(CompilerException.class, () -> {
            compile("main.spin2", sources);
        });
    }

    @Test
    void testDebug() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    debug(udec(a))\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "    debug(udec(a,b,c))\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 00    Object \"text2.spin2\" @ $00018\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       16 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     debug(udec(a))\n"
            + "00011 00011       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00012 00012       43 04 02       DEBUG #2\n"
            + "00015 00015       04             RETURN\n"
            + "00016 00016       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00018 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "0001C 00004       14 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00020 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00021 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00022 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00023 0000B       8A             ADD\n"
            + "00024 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "'     debug(udec(a,b,c))\n"
            + "00025 0000D       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00026 0000E       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00027 0000F       E2             VAR_READ LONG DBASE+$00002 (short)\n"
            + "00028 00010       43 0C 01       DEBUG #1\n"
            + "0002B 00013       04             RETURN\n"
            + "' Debug data\n"
            + "00000 00000       16 00         \n"
            + "00002 00002       06 00         \n"
            + "00004 00004       11 00         \n"
            + "' #1\n"
            + "00006 00006       04             COGN\n"
            + "00007 00007       41 61 00       UDEC(a)\n"
            + "0000A 0000A       40 62 00       UDEC(b)\n"
            + "0000D 0000D       40 63 00       UDEC(c)\n"
            + "00010 00010       00             DONE\n"
            + "' #2\n"
            + "00011 00011       04             COGN\n"
            + "00012 00012       41 61 00       UDEC(a)\n"
            + "00015 00015       00             DONE\n"
            + "", compile("main.spin2", sources, false, true));
    }

    @Test
    void testDuplicateObjectDebug() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o1 : \"text2\"\n"
            + "    o2 : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    debug(udec(a))\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "    debug(udec(a,b,c))\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       20 00 00 00    Object \"text2.spin2\" @ $00020\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       20 00 00 00    Object \"text2.spin2\" @ $00020\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00014 00014       1E 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00018 00018       01             (stack size)\n"
            + "'     debug(udec(a))\n"
            + "00019 00019       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0001A 0001A       43 04 02       DEBUG #2\n"
            + "0001D 0001D       04             RETURN\n"
            + "0001E 0001E       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00020 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "00024 00004       14 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00028 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00029 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0002A 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "0002B 0000B       8A             ADD\n"
            + "0002C 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "'     debug(udec(a,b,c))\n"
            + "0002D 0000D       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0002E 0000E       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "0002F 0000F       E2             VAR_READ LONG DBASE+$00002 (short)\n"
            + "00030 00010       43 0C 01       DEBUG #1\n"
            + "00033 00013       04             RETURN\n"
            + "' Debug data\n"
            + "00000 00000       16 00         \n"
            + "00002 00002       06 00         \n"
            + "00004 00004       11 00         \n"
            + "' #1\n"
            + "00006 00006       04             COGN\n"
            + "00007 00007       41 61 00       UDEC(a)\n"
            + "0000A 0000A       40 62 00       UDEC(b)\n"
            + "0000D 0000D       40 63 00       UDEC(c)\n"
            + "00010 00010       00             DONE\n"
            + "' #2\n"
            + "00011 00011       04             COGN\n"
            + "00012 00012       41 61 00       UDEC(a)\n"
            + "00015 00015       00             DONE\n"
            + "", compile("main.spin2", sources, false, true));
    }

    @Test
    void testDuplicatedObjectsPAsmDebug() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o1 : \"text2\"\n"
            + "    o2 : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    debug(udec(a))\n"
            + "");
        sources.put("text2.spin2", ""
            + "DAT             org   $000\n"
            + "                mov   a, #1\n"
            + "                debug(udec(a))\n"
            + "                ret\n"
            + "a               res   1\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       20 00 00 00    Object \"text2.spin2\" @ $00020\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       20 00 00 00    Object \"text2.spin2\" @ $00020\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00014 00014       1E 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00018 00018       01             (stack size)\n"
            + "'     debug(udec(a))\n"
            + "00019 00019       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0001A 0001A       43 04 02       DEBUG #2\n"
            + "0001D 0001D       04             RETURN\n"
            + "0001E 0001E       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00020 00000   000                                    org     $000\n"
            + "00020 00000   000 01 06 04 F6                        mov     a, #1\n"
            + "00024 00004   001 36 02 64 FD                        debug(udec(a))\n"
            + "00028 00008   002 2D 00 64 FD                        ret\n"
            + "0002C 0000C   003                a                   res     1\n"
            + "' Debug data\n"
            + "00000 00000       13 00         \n"
            + "00002 00002       06 00         \n"
            + "00004 00004       0E 00         \n"
            + "' #1\n"
            + "00006 00006       01             ASMMODE\n"
            + "00007 00007       04             COGN\n"
            + "00008 00008       41 61 00 80 03 UDEC(a)\n"
            + "0000D 0000D       00             DONE\n"
            + "' #2\n"
            + "0000E 0000E       04             COGN\n"
            + "0000F 0000F       41 61 00       UDEC(a)\n"
            + "00012 00012       00             DONE\n"
            + "", compile("main.spin2", sources, false, true));
    }

    @Test
    void testDuplicatedObjectsDebug() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o1 : \"text2\"\n"
            + "    o2 : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    debug(udec(a))\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "    debug(udec(a,b,c))\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       20 00 00 00    Object \"text2.spin2\" @ $00020\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       20 00 00 00    Object \"text2.spin2\" @ $00020\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00014 00014       1E 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00018 00018       01             (stack size)\n"
            + "'     debug(udec(a))\n"
            + "00019 00019       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0001A 0001A       43 04 02       DEBUG #2\n"
            + "0001D 0001D       04             RETURN\n"
            + "0001E 0001E       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00020 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "00024 00004       14 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00028 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00029 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0002A 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "0002B 0000B       8A             ADD\n"
            + "0002C 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "'     debug(udec(a,b,c))\n"
            + "0002D 0000D       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0002E 0000E       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "0002F 0000F       E2             VAR_READ LONG DBASE+$00002 (short)\n"
            + "00030 00010       43 0C 01       DEBUG #1\n"
            + "00033 00013       04             RETURN\n"
            + "' Debug data\n"
            + "00000 00000       16 00         \n"
            + "00002 00002       06 00         \n"
            + "00004 00004       11 00         \n"
            + "' #1\n"
            + "00006 00006       04             COGN\n"
            + "00007 00007       41 61 00       UDEC(a)\n"
            + "0000A 0000A       40 62 00       UDEC(b)\n"
            + "0000D 0000D       40 63 00       UDEC(c)\n"
            + "00010 00010       00             DONE\n"
            + "' #2\n"
            + "00011 00011       04             COGN\n"
            + "00012 00012       41 61 00       UDEC(a)\n"
            + "00015 00015       00             DONE\n"
            + "", compile("main.spin2", sources, false, true));
    }

    @Test
    void testObjectDebugDisabled() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    debug(udec(a))\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "DEBUG_DISABLE = true\n"
            + "\n"
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "    debug(udec(a,b,c))\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 00    Object \"text2.spin2\" @ $00018\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       16 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     debug(udec(a))\n"
            + "00011 00011       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00012 00012       43 04 01       DEBUG #1\n"
            + "00015 00015       04             RETURN\n"
            + "00016 00016       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00018 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "0001C 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00020 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00021 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00022 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00023 0000B       8A             ADD\n"
            + "00024 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "'     debug(udec(a,b,c))\n"
            + "00025 0000D       04             RETURN\n"
            + "00026 0000E       00 00          Padding\n"
            + "' Debug data\n"
            + "00000 00000       09 00         \n"
            + "00002 00002       04 00         \n"
            + "' #1\n"
            + "00004 00004       04             COGN\n"
            + "00005 00005       41 61 00       UDEC(a)\n"
            + "00008 00008       00             DONE\n"
            + "", compile("main.spin2", sources, false, true));
    }

    @Test
    void testDisableObjectDebugParameter() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\" | DEBUG_DISABLE=true\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    debug(udec(a))\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "    debug(udec(a,b,c))\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 00    Object \"text2.spin2\" @ $00018\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       16 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     debug(udec(a))\n"
            + "00011 00011       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00012 00012       43 04 01       DEBUG #1\n"
            + "00015 00015       04             RETURN\n"
            + "00016 00016       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00018 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "0001C 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00020 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00021 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00022 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00023 0000B       8A             ADD\n"
            + "00024 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "'     debug(udec(a,b,c))\n"
            + "00025 0000D       04             RETURN\n"
            + "00026 0000E       00 00          Padding\n"
            + "' Debug data\n"
            + "00000 00000       09 00         \n"
            + "00002 00002       04 00         \n"
            + "' #1\n"
            + "00004 00004       04             COGN\n"
            + "00005 00005       41 61 00       UDEC(a)\n"
            + "00008 00008       00             DONE\n"
            + "", compile("main.spin2", sources, false, true));
    }

    @Test
    void testEnableObjectDebugParameter() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\" | DEBUG_DISABLE=false\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    debug(udec(a))\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "DEBUG_DISABLE = true\n"
            + "\n"
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "    debug(udec(a,b,c))\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 00    Object \"text2.spin2\" @ $00018\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       16 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     debug(udec(a))\n"
            + "00011 00011       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00012 00012       43 04 02       DEBUG #2\n"
            + "00015 00015       04             RETURN\n"
            + "00016 00016       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00018 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "0001C 00004       14 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00020 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00021 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00022 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00023 0000B       8A             ADD\n"
            + "00024 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "'     debug(udec(a,b,c))\n"
            + "00025 0000D       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00026 0000E       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00027 0000F       E2             VAR_READ LONG DBASE+$00002 (short)\n"
            + "00028 00010       43 0C 01       DEBUG #1\n"
            + "0002B 00013       04             RETURN\n"
            + "' Debug data\n"
            + "00000 00000       16 00         \n"
            + "00002 00002       06 00         \n"
            + "00004 00004       11 00         \n"
            + "' #1\n"
            + "00006 00006       04             COGN\n"
            + "00007 00007       41 61 00       UDEC(a)\n"
            + "0000A 0000A       40 62 00       UDEC(b)\n"
            + "0000D 0000D       40 63 00       UDEC(c)\n"
            + "00010 00010       00             DONE\n"
            + "' #2\n"
            + "00011 00011       04             COGN\n"
            + "00012 00012       41 61 00       UDEC(a)\n"
            + "00015 00015       00             DONE\n"
            + "", compile("main.spin2", sources, false, true));
    }

    @Test
    void testRemoveUnusedMethods() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "PUB main() | a\n"
            + "\n"
            + "    a := 1\n"
            + "\n"
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       08 00 00 80    Method main @ $00008 (0 parameters, 0 returns)\n"
            + "00004 00004       0C 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00008 00008       01             (stack size)\n"
            + "'     a := 1\n"
            + "00009 00009       A2             CONSTANT (1)\n"
            + "0000A 0000A       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "0000B 0000B       04             RETURN\n"
            + "", compile("main.spin2", sources, true, false));
    }

    @Test
    void testRemoveMiddleUnusedMethods() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "PUB main() | a\n"
            + "\n"
            + "    a := 1\n"
            + "    start(1, 2)\n"
            + "\n"
            + "PUB stop() | c\n"
            + "\n"
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       0C 00 00 80    Method main @ $0000C (0 parameters, 0 returns)\n"
            + "00004 00004       15 00 00 82    Method start @ $00015 (2 parameters, 0 returns)\n"
            + "00008 00008       1B 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "0000C 0000C       01             (stack size)\n"
            + "'     a := 1\n"
            + "0000D 0000D       A2             CONSTANT (1)\n"
            + "0000E 0000E       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "'     start(1, 2)\n"
            + "0000F 0000F       00             ANCHOR\n"
            + "00010 00010       A2             CONSTANT (1)\n"
            + "00011 00011       A3             CONSTANT (2)\n"
            + "00012 00012       0A 01          CALL_SUB (1)\n"
            + "00014 00014       04             RETURN\n"
            + "' PUB start(a, b) | c\n"
            + "00015 00015       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00016 00016       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00017 00017       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00018 00018       8A             ADD\n"
            + "00019 00019       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "0001A 0001A       04             RETURN\n"
            + "0001B 0001B       00             Padding\n"
            + "", compile("main.spin2", sources, true, false));
    }

    @Test
    void testUnusedMethodsCauseErrors() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "PUB main() | a\n"
            + "\n"
            + "    a := 1\n"
            + "\n"
            + "PUB start(a, b)\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertThrows(CompilerException.class, new Executable() {

            @Override
            public void execute() throws Throwable {
                compile("main.spin2", sources, true, false);
            }

        });
    }

    @Test
    void testObjectUnusedMethodCall() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    o.start(1, 2)\n"
            + "    o.method2()\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b)\n"
            + "\n"
            + "PUB method1()\n"
            + "\n"
            + "PUB method2()\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       1C 00 00 00    Object \"text2.spin2\" @ $0001C\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       1C 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     o.start(1, 2)\n"
            + "00011 00011       00             ANCHOR\n"
            + "00012 00012       A2             CONSTANT (1)\n"
            + "00013 00013       A3             CONSTANT (2)\n"
            + "00014 00014       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "'     o.method2()\n"
            + "00017 00017       00             ANCHOR\n"
            + "00018 00018       08 00 01       CALL_OBJ_SUB (0.1)\n"
            + "0001B 0001B       04             RETURN\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "0001C 00000       0C 00 00 82    Method start @ $0000C (2 parameters, 0 returns)\n"
            + "00020 00004       0E 00 00 80    Method method2 @ $0000E (0 parameters, 0 returns)\n"
            + "00024 00008       10 00 00 00    End\n"
            + "' PUB start(a, b)\n"
            + "00028 0000C       00             (stack size)\n"
            + "00029 0000D       04             RETURN\n"
            + "' PUB method2()\n"
            + "0002A 0000E       00             (stack size)\n"
            + "0002B 0000F       04             RETURN\n"
            + "", compile("main.spin2", sources, true, false));
    }

    @Test
    void testObjectArray() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o[2] : \"text2\"\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start()\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       1C 00 00 00    Object \"text2.spin2\" @ $0001C\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       1C 00 00 00    Object \"text2.spin2\" @ $0001C\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00014 00014       1A 00 00 00    End\n"
            + "' PUB main()\n"
            + "00018 00018       00             (stack size)\n"
            + "00019 00019       04             RETURN\n"
            + "0001A 0001A       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "0001C 00000       08 00 00 80    Method start @ $00008 (0 parameters, 0 returns)\n"
            + "00020 00004       0A 00 00 00    End\n"
            + "' PUB start()\n"
            + "00024 00008       00             (stack size)\n"
            + "00025 00009       04             RETURN\n"
            + "00026 0000A       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectArrayExpression() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "CON\n"
            + "\n"
            + "    NUMBER = 2\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o[NUMBER + 1] : \"text2\"\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start()\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       24 00 00 00    Object \"text2.spin2\" @ $00024\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       24 00 00 00    Object \"text2.spin2\" @ $00024\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       24 00 00 00    Object \"text2.spin2\" @ $00024\n"
            + "00014 00014       0C 00 00 00    Variables @ $0000C\n"
            + "00018 00018       20 00 00 80    Method main @ $00020 (0 parameters, 0 returns)\n"
            + "0001C 0001C       22 00 00 00    End\n"
            + "' PUB main()\n"
            + "00020 00020       00             (stack size)\n"
            + "00021 00021       04             RETURN\n"
            + "00022 00022       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00024 00000       08 00 00 80    Method start @ $00008 (0 parameters, 0 returns)\n"
            + "00028 00004       0A 00 00 00    End\n"
            + "' PUB start()\n"
            + "0002C 00008       00             (stack size)\n"
            + "0002D 00009       04             RETURN\n"
            + "0002E 0000A       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectConstantsReference() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "CON\n"
            + "\n"
            + "    #o.LAST\n"
            + "    TWO, THREE\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    a := TWO\n"
            + "    a := THREE\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "CON\n"
            + "\n"
            + "    #0\n"
            + "    ZERO, ONE\n"
            + "    LAST\n"
            + "\n"
            + "PUB start()\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 00    Object \"text2.spin2\" @ $00018\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       16 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     a := TWO\n"
            + "00011 00011       A3             CONSTANT (o.LAST)\n"
            + "00012 00012       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "'     a := THREE\n"
            + "00013 00013       A4             CONSTANT (o.LAST + 1)\n"
            + "00014 00014       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "00015 00015       04             RETURN\n"
            + "00016 00016       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00018 00000       08 00 00 80    Method start @ $00008 (0 parameters, 0 returns)\n"
            + "0001C 00004       0A 00 00 00    End\n"
            + "' PUB start()\n"
            + "00020 00008       00             (stack size)\n"
            + "00021 00009       04             RETURN\n"
            + "00022 0000A       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectArrayMethodCall() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o[2] : \"text2\"\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "    o[0].start(1, 2)\n"
            + "    \\o[1].start(3, 4)\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       28 00 00 00    Object \"text2.spin2\" @ $00028\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       28 00 00 00    Object \"text2.spin2\" @ $00028\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00014 00014       28 00 00 00    End\n"
            + "' PUB main()\n"
            + "00018 00018       00             (stack size)\n"
            + "'     o[0].start(1, 2)\n"
            + "00019 00019       00             ANCHOR\n"
            + "0001A 0001A       A2             CONSTANT (1)\n"
            + "0001B 0001B       A3             CONSTANT (2)\n"
            + "0001C 0001C       A1             CONSTANT (0)\n"
            + "0001D 0001D       09 00 00       CALL_OBJ_SUB (0.0) (indexed)\n"
            + "'     \\o[1].start(3, 4)\n"
            + "00020 00020       02             ANCHOR_TRAP\n"
            + "00021 00021       A4             CONSTANT (3)\n"
            + "00022 00022       A5             CONSTANT (4)\n"
            + "00023 00023       A2             CONSTANT (1)\n"
            + "00024 00024       09 00 00       CALL_OBJ_SUB (0.0) (indexed)\n"
            + "00027 00027       04             RETURN\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00028 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "0002C 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00030 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00031 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00032 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00033 0000B       8A             ADD\n"
            + "00034 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "00035 0000D       04             RETURN\n"
            + "00036 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectArrayMethodPointer() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o[2] : \"text2\"\n"
            + "\n"
            + "PUB main() | a, b\n"
            + "\n"
            + "    a := @o[0].start\n"
            + "    b := @o[1].start\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       24 00 00 00    Object \"text2.spin2\" @ $00024\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       24 00 00 00    Object \"text2.spin2\" @ $00024\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00014 00014       24 00 00 00    End\n"
            + "' PUB main() | a, b\n"
            + "00018 00018       02             (stack size)\n"
            + "'     a := @o[0].start\n"
            + "00019 00019       A1             CONSTANT (0)\n"
            + "0001A 0001A       10 00 00       OBJ_SUB_ADDRESS (0.0) (indexed)\n"
            + "0001D 0001D       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "'     b := @o[1].start\n"
            + "0001E 0001E       A2             CONSTANT (1)\n"
            + "0001F 0001F       10 00 00       OBJ_SUB_ADDRESS (0.0) (indexed)\n"
            + "00022 00022       F1             VAR_WRITE LONG DBASE+$00001 (short)\n"
            + "00023 00023       04             RETURN\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00024 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "00028 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "0002C 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "0002D 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "0002E 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "0002F 0000B       8A             ADD\n"
            + "00030 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "00031 0000D       04             RETURN\n"
            + "00032 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testMixedObjectArrayMethodCall() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o[2] : \"text2\"\n"
            + "    o2 : \"text2\"\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "    o[0].start(1, 2)\n"
            + "    o[1].start(3, 4)\n"
            + "    o2.start(5, 6)\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start(a, b) | c\n"
            + "\n"
            + "    c := a + b\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       38 00 00 00    Object \"text2.spin2\" @ $00038\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       38 00 00 00    Object \"text2.spin2\" @ $00038\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       38 00 00 00    Object \"text2.spin2\" @ $00038\n"
            + "00014 00014       0C 00 00 00    Variables @ $0000C\n"
            + "00018 00018       20 00 00 80    Method main @ $00020 (0 parameters, 0 returns)\n"
            + "0001C 0001C       36 00 00 00    End\n"
            + "' PUB main()\n"
            + "00020 00020       00             (stack size)\n"
            + "'     o[0].start(1, 2)\n"
            + "00021 00021       00             ANCHOR\n"
            + "00022 00022       A2             CONSTANT (1)\n"
            + "00023 00023       A3             CONSTANT (2)\n"
            + "00024 00024       A1             CONSTANT (0)\n"
            + "00025 00025       09 00 00       CALL_OBJ_SUB (0.0) (indexed)\n"
            + "'     o[1].start(3, 4)\n"
            + "00028 00028       00             ANCHOR\n"
            + "00029 00029       A4             CONSTANT (3)\n"
            + "0002A 0002A       A5             CONSTANT (4)\n"
            + "0002B 0002B       A2             CONSTANT (1)\n"
            + "0002C 0002C       09 00 00       CALL_OBJ_SUB (0.0) (indexed)\n"
            + "'     o2.start(5, 6)\n"
            + "0002F 0002F       00             ANCHOR\n"
            + "00030 00030       A6             CONSTANT (5)\n"
            + "00031 00031       A7             CONSTANT (6)\n"
            + "00032 00032       08 02 00       CALL_OBJ_SUB (2.0)\n"
            + "00035 00035       04             RETURN\n"
            + "00036 00036       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00038 00000       08 00 00 82    Method start @ $00008 (2 parameters, 0 returns)\n"
            + "0003C 00004       0E 00 00 00    End\n"
            + "' PUB start(a, b) | c\n"
            + "00040 00008       01             (stack size)\n"
            + "'     c := a + b\n"
            + "00041 00009       E0             VAR_READ LONG DBASE+$00000 (short)\n"
            + "00042 0000A       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00043 0000B       8A             ADD\n"
            + "00044 0000C       F2             VAR_WRITE LONG DBASE+$00002 (short)\n"
            + "00045 0000D       04             RETURN\n"
            + "00046 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testAbsoluteAddress() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "PUB main()\n"
            + "\n"
            + "DAT             org   $000\n"
            + "                mov   a, ##@@a\n"
            + "                ret\n"
            + "a               long  0\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 80    Method main @ $00018 (0 parameters, 0 returns)\n"
            + "00004 00004       1A 00 00 00    End\n"
            + "00008 00008   000                                    org     $000\n"
            + "00008 00008   000 0A 00 00 FF                        mov     a, ##@@a\n"
            + "0000C 0000C   001 B0 06 04 F6\n"
            + "00010 00010   002 2D 00 64 FD                        ret\n"
            + "00014 00014   003 00 00 00 00    a                   long    0\n"
            + "' PUB main()\n"
            + "00018 00018       00             (stack size)\n"
            + "00019 00019       04             RETURN\n"
            + "0001A 0001A       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testSpinAbsoluteAddress() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "PUB main() | a\n"
            + "\n"
            + "    a := @@driver\n"
            + "\n"
            + "DAT\n"
            + "                org   $000\n"
            + "driver          jmp   #$\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       0C 00 00 80    Method main @ $0000C (0 parameters, 0 returns)\n"
            + "00004 00004       12 00 00 00    End\n"
            + "00008 00008   000                                    org     $000\n"
            + "00008 00008   000 FC FF 9F FD    driver              jmp     #$\n"
            + "' PUB main() | a\n"
            + "0000C 0000C       01             (stack size)\n"
            + "'     a := @@driver\n"
            + "0000D 0000D       46 A4 14       CONSTANT (5284)\n"
            + "00010 00010       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "00011 00011       04             RETURN\n"
            + "00012 00012       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testSpinAbsoluteAddressExpression() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "PUB main() | a, b\n"
            + "\n"
            + "    a := @@driver + b\n"
            + "\n"
            + "DAT\n"
            + "                org   $000\n"
            + "driver          jmp   #$\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       0C 00 00 80    Method main @ $0000C (0 parameters, 0 returns)\n"
            + "00004 00004       15 00 00 00    End\n"
            + "00008 00008   000                                    org     $000\n"
            + "00008 00008   000 FC FF 9F FD    driver              jmp     #$\n"
            + "' PUB main() | a, b\n"
            + "0000C 0000C       02             (stack size)\n"
            + "'     a := @@driver + b\n"
            + "0000D 0000D       5D 08 80       MEM_READ LONG PBASE+$00008\n"
            + "00010 00010       24             ADD_PBASE\n"
            + "00011 00011       E1             VAR_READ LONG DBASE+$00001 (short)\n"
            + "00012 00012       8A             ADD\n"
            + "00013 00013       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "00014 00014       04             RETURN\n"
            + "00015 00015       00 00 00       Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testMixedSpinAndHubExecCode() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "CON\n"
            + "    _CLKFREQ = 160_000_000\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "    coginit(HUBEXEC_NEW, @blink, 0)\n"
            + "    repeat\n"
            + "\n"
            + "DAT\n"
            + "                org\n"
            + "\n"
            + "delay           long    _CLKFREQ / 2\n"
            + "ct              res     1\n"
            + "\n"
            + "                orgh\n"
            + "'\n"
            + "blink\n"
            + "                getct   ct\n"
            + ".loop           drvnot  #56\n"
            + "                addct1  ct, delay\n"
            + "                waitct1\n"
            + "                jmp     #\\.loop\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       20 00 00 80    Method main @ $00020 (0 parameters, 0 returns)\n"
            + "00004 00004       2B 00 00 00    End\n"
            + "00008 00008   000                                    org\n"
            + "00008 00008   000 00 B4 C4 04    delay               long    _CLKFREQ / 2\n"
            + "0000C 0000C   001                ct                  res     1\n"
            + "0000C 0000C 00400                                    orgh\n"
            + "0000C 0000C 00400                blink               \n"
            + "0000C 0000C 00400 1A 02 60 FD                        getct   ct\n"
            + "00010 00010 00404 5F 70 64 FD    .loop               drvnot  #56\n"
            + "00014 00014 00408 00 02 60 FA                        addct1  ct, delay\n"
            + "00018 00018 0040C 24 22 60 FD                        waitct1\n"
            + "0001C 0001C 00410 04 04 80 FD                        jmp     #\\.loop\n"
            + "' PUB main()\n"
            + "00020 00020       00             (stack size)\n"
            + "'     coginit(HUBEXEC_NEW, @blink, 0)\n"
            + "00021 00021       44 30          CONSTANT (48)\n"
            + "00023 00023       5D 0C 7F       MEM_ADDRESS PBASE+$0000C\n"
            + "00026 00026       A1             CONSTANT (0)\n"
            + "00027 00027       25             COGINIT\n"
            + "'     repeat\n"
            + "00028 00028       12 7F          JMP $00028 (-1)\n"
            + "0002A 0002A       04             RETURN\n"
            + "0002B 0002B       00             Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testSpinOrgModes() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "PUB start()\n"
            + "\n"
            + "DAT\n"
            + "                org     $000\n"
            + "\n"
            + "driver1         jmp     #\\$\n"
            + "\n"
            + "DAT\n"
            + "                org     $040\n"
            + "\n"
            + "driver2         jmp     #\\$\n"
            + "\n"
            + "DAT\n"
            + "                orgh\n"
            + "\n"
            + "driver3         jmp     #\\$\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       14 00 00 80    Method start @ $00014 (0 parameters, 0 returns)\n"
            + "00004 00004       16 00 00 00    End\n"
            + "00008 00008   000                                    org     $000\n"
            + "00008 00008   000 00 00 80 FD    driver1             jmp     #\\$\n"
            + "0000C 0000C   001                                    org     $040\n"
            + "0000C 0000C   040 40 00 80 FD    driver2             jmp     #\\$\n"
            + "00010 00010 00400                                    orgh\n"
            + "00010 00010 00400 00 04 80 FD    driver3             jmp     #\\$\n"
            + "' PUB start()\n"
            + "00014 00014       00             (stack size)\n"
            + "00015 00015       04             RETURN\n"
            + "00016 00016       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testSpinOrgh() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "PUB main()\n"
            + "\n"
            + "DAT\n"
            + "                orgh\n"
            + "a               long    0\n"
            + "\n"
            + "                org\n"
            + "b               long    a\n"
            + "                long    b\n"
            + "                long    c\n"
            + "\n"
            + "                orgh\n"
            + "c               long    0\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       1C 00 00 80    Method main @ $0001C (0 parameters, 0 returns)\n"
            + "00004 00004       1E 00 00 00    End\n"
            + "00008 00008 00400                                    orgh\n"
            + "00008 00008 00400 00 00 00 00    a                   long    0\n"
            + "0000C 0000C   101                                    org\n"
            + "0000C 0000C   000 00 04 00 00    b                   long    a\n"
            + "00010 00010   001 00 00 00 00                        long    b\n"
            + "00014 00014   002 10 04 00 00                        long    c\n"
            + "00018 00018 00410                                    orgh\n"
            + "00018 00018 00410 00 00 00 00    c                   long    0\n"
            + "' PUB main()\n"
            + "0001C 0001C       00             (stack size)\n"
            + "0001D 0001D       04             RETURN\n"
            + "0001E 0001E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testDatInclude() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "PUB main()\n"
            + "\n"
            + "DAT\n"
            + "    org $000\n"
            + "    call    #\\label\n"
            + "    jmp     #$\n"
            + "    include \"text2\"\n"
            + "a   long    0\n"
            + "");
        sources.put("text2.spin2", ""
            + "DAT\n"
            + "\n"
            + "label\n"
            + "          mov a, #1\n"
            + "          ret\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       1C 00 00 80    Method main @ $0001C (0 parameters, 0 returns)\n"
            + "00004 00004       1E 00 00 00    End\n"
            + "00008 00008   000                                    org     $000\n"
            + "00008 00008   000 02 00 A0 FD                        call    #\\label\n"
            + "0000C 0000C   001 FC FF 9F FD                        jmp     #$\n"
            + "00010 00010   002                                    include \"text2\"\n"
            + "00010 00010   002                label               \n"
            + "00010 00010   002 01 08 04 F6                        mov     a, #1\n"
            + "00014 00014   003 2D 00 64 FD                        ret\n"
            + "00018 00018   004 00 00 00 00    a                   long    0\n"
            + "' PUB main()\n"
            + "0001C 0001C       00             (stack size)\n"
            + "0001D 0001D       04             RETURN\n"
            + "0001E 0001E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testObjectParameters() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "OBJ\n"
            + "\n"
            + "    o0 : \"text2\"\n"
            + "    o1 : \"text2\" | PAR1 = 3\n"
            + "    o2 : \"text2\" | PAR1 = 4, PAR2 = 5\n"
            + "\n"
            + "PUB main()\n"
            + "\n"
            + "    o0.setup()\n"
            + "    o1.setup()\n"
            + "    o2.setup()\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "CON\n"
            + "    #1, PAR1, PAR2\n"
            + "\n"
            + "PUB setup() | a, b\n"
            + "\n"
            + "    a := PAR1\n"
            + "    b := PAR2\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       30 00 00 00    Object \"text2.spin2\" @ $00030\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       40 00 00 00    Object \"text2.spin2\" @ $00040\n"
            + "0000C 0000C       08 00 00 00    Variables @ $00008\n"
            + "00010 00010       50 00 00 00    Object \"text2.spin2\" @ $00050\n"
            + "00014 00014       0C 00 00 00    Variables @ $0000C\n"
            + "00018 00018       20 00 00 80    Method main @ $00020 (0 parameters, 0 returns)\n"
            + "0001C 0001C       2E 00 00 00    End\n"
            + "' PUB main()\n"
            + "00020 00020       00             (stack size)\n"
            + "'     o0.setup()\n"
            + "00021 00021       00             ANCHOR\n"
            + "00022 00022       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "'     o1.setup()\n"
            + "00025 00025       00             ANCHOR\n"
            + "00026 00026       08 01 00       CALL_OBJ_SUB (1.0)\n"
            + "'     o2.setup()\n"
            + "00029 00029       00             ANCHOR\n"
            + "0002A 0002A       08 02 00       CALL_OBJ_SUB (2.0)\n"
            + "0002D 0002D       04             RETURN\n"
            + "0002E 0002E       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00030 00000       08 00 00 80    Method setup @ $00008 (0 parameters, 0 returns)\n"
            + "00034 00004       0E 00 00 00    End\n"
            + "' PUB setup() | a, b\n"
            + "00038 00008       02             (stack size)\n"
            + "'     a := PAR1\n"
            + "00039 00009       A2             CONSTANT (1)\n"
            + "0003A 0000A       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "'     b := PAR2\n"
            + "0003B 0000B       A3             CONSTANT (2)\n"
            + "0003C 0000C       F1             VAR_WRITE LONG DBASE+$00001 (short)\n"
            + "0003D 0000D       04             RETURN\n"
            + "0003E 0000E       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00040 00000       08 00 00 80    Method setup @ $00008 (0 parameters, 0 returns)\n"
            + "00044 00004       0E 00 00 00    End\n"
            + "' PUB setup() | a, b\n"
            + "00048 00008       02             (stack size)\n"
            + "'     a := PAR1\n"
            + "00049 00009       A4             CONSTANT (3)\n"
            + "0004A 0000A       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "'     b := PAR2\n"
            + "0004B 0000B       A3             CONSTANT (2)\n"
            + "0004C 0000C       F1             VAR_WRITE LONG DBASE+$00001 (short)\n"
            + "0004D 0000D       04             RETURN\n"
            + "0004E 0000E       00 00          Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00050 00000       08 00 00 80    Method setup @ $00008 (0 parameters, 0 returns)\n"
            + "00054 00004       0E 00 00 00    End\n"
            + "' PUB setup() | a, b\n"
            + "00058 00008       02             (stack size)\n"
            + "'     a := PAR1\n"
            + "00059 00009       A5             CONSTANT (4)\n"
            + "0005A 0000A       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "'     b := PAR2\n"
            + "0005B 0000B       A6             CONSTANT (5)\n"
            + "0005C 0000C       F1             VAR_WRITE LONG DBASE+$00001 (short)\n"
            + "0005D 0000D       04             RETURN\n"
            + "0005E 0000E       00 00          Padding\n"
            + "", compile("main.spin2", sources));
    }

    @Test
    void testPreprocessorDefineInheritance() throws Exception {
        Map<String, String> sources = new HashMap<String, String>();
        sources.put("main.spin2", ""
            + "#define VALUE 2\n"
            + "\n"
            + "OBJ\n"
            + "\n"
            + "    o : \"text2\"\n"
            + "\n"
            + "PUB main() | a\n"
            + "\n"
            + "    a := o.start()\n"
            + "\n"
            + "");
        sources.put("text2.spin2", ""
            + "PUB start() : r\n"
            + "\n"
            + "    r := VALUE\n"
            + "\n"
            + "");

        Assertions.assertEquals(""
            + "' Object header (var size 4)\n"
            + "00000 00000       18 00 00 00    Object \"text2.spin2\" @ $00018\n"
            + "00004 00004       04 00 00 00    Variables @ $00004\n"
            + "00008 00008       10 00 00 80    Method main @ $00010 (0 parameters, 0 returns)\n"
            + "0000C 0000C       17 00 00 00    End\n"
            + "' PUB main() | a\n"
            + "00010 00010       01             (stack size)\n"
            + "'     a := o.start()\n"
            + "00011 00011       01             ANCHOR\n"
            + "00012 00012       08 00 00       CALL_OBJ_SUB (0.0)\n"
            + "00015 00015       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "00016 00016       04             RETURN\n"
            + "00017 00017       00             Padding\n"
            + "' Object \"text2.spin2\" header (var size 4)\n"
            + "00018 00000       08 00 10 80    Method start @ $00008 (0 parameters, 1 returns)\n"
            + "0001C 00004       0C 00 00 00    End\n"
            + "' PUB start() : r\n"
            + "00020 00008       00             (stack size)\n"
            + "'     r := VALUE\n"
            + "00021 00009       A3             CONSTANT (2)\n"
            + "00022 0000A       F0             VAR_WRITE LONG DBASE+$00000 (short)\n"
            + "00023 0000B       04             RETURN\n"
            + "", compile("main.spin2", sources));
    }

    String compile(String rootFile, Map<String, String> sources) throws Exception {
        return compile(rootFile, sources, false, false);
    }

    String compile(String rootFile, Map<String, String> sources, boolean removeUnused, boolean debugEnabled) throws Exception {
        Spin2TokenStream stream = new Spin2TokenStream(sources.get(rootFile));
        Spin2Parser subject = new Spin2Parser(stream);
        Node root = subject.parse();

        Spin2Compiler compiler = new Spin2Compiler();
        compiler.setSourceProvider(new SourceProvider() {

            @Override
            public File getFile(String name) {
                if (sources.containsKey(name)) {
                    return new File(name);
                }
                return null;
            }

            @Override
            public Node getParsedSource(File file) {
                String text = sources.get(file.getName());
                if (text == null) {
                    return null;
                }
                String suffix = file.getName().substring(file.getName().lastIndexOf('.'));
                Parser parser = Parser.getInstance(suffix, text);
                return parser.parse();
            }

        });
        compiler.setRemoveUnusedMethods(removeUnused);
        compiler.setDebugEnabled(debugEnabled);
        Spin2Object obj = compiler.compileObject(new File(rootFile), root);

        for (CompilerException msg : compiler.getMessages()) {
            if (msg.type == CompilerException.ERROR) {
                throw msg;
            }
        }

        ByteArrayOutputStream os = new ByteArrayOutputStream();
        obj.generateListing(new PrintStream(os));

        return os.toString().replaceAll("\\r\\n", "\n");
    }

}
