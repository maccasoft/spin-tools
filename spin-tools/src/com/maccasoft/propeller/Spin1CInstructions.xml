<content>
    <section class="Root">
        <entry name="CON"><![CDATA[<b>CON</b><p>Constant declarations (CON is the initial/default block type)</p>]]></entry>
        <entry name="VAR"><![CDATA[<b>VAR</b><p>Variable declarations</p>]]></entry>
        <entry name="OBJ"><![CDATA[<b>OBJ</b><p>Child-object instantiations</p>]]></entry>
        <entry name="PUB"><![CDATA[<b>PUB</b><p>Public method for use by the parent object and within this object</p>]]></entry>
        <entry name="PRI"><![CDATA[<b>PRI</b><p>Private method for use within this object</p>]]></entry>
        <entry name="DAT"><![CDATA[<b>DAT</b><p>Data declarations, including PASM code</p>]]></entry>
    </section>

    <section class="FunctionNode,StatementNode">
        <entry name="abort"></entry>
        <entry name="send"></entry>
        <entry name="recv"></entry>
        <entry name="if,else"></entry>
        <entry name="switch,case,default"></entry>
        <entry name="for"></entry>
        <entry name="do,while,until"></entry>
        <entry name="asm"></entry>

        <entry name="bytefill" insert="bytefill(dest, value, count)"><![CDATA[<b>BYTEFILL(Dest, Value, Count)</b><br/><br/>Fill Count bytes at Dest with Value]]></entry>
        <entry name="wordfill" insert="wordfill(dest, value, count)"><![CDATA[<b>WORDFILL(Dest, Value, Count)</b><br/><br/>Fill Count words at Dest with Value]]></entry>
        <entry name="longfill" insert="longfill(dest, value, count)"><![CDATA[<b>LONGFILL(Dest, Value, Count)</b><br/><br/>Fill Count longs at Dest with Value]]></entry>
        <entry name="bytemove" insert="bytemove(dest, source, count)"><![CDATA[<b>BYTEMOVE(Dest, Source, Count)</b><br/><br/>Move Count bytes from Source to Dest]]></entry>
        <entry name="wordmove" insert="wordmove(dest, source, count)"><![CDATA[<b>WORDMOVE(Dest, Source, Count)</b><br/><br/>Move Count words from Source to Dest]]></entry>
        <entry name="longmove" insert="longmove(dest, source, count)"><![CDATA[<b>LONGMOVE(Dest, Source, Count)</b><br/><br/>Move Count longs from Source to Dest]]></entry>
    
        <entry name="lookup" insert="lookup(index: v1, v2..v3, etc)"><![CDATA[<b>LOOKUP(Index: v1, v2..v3, etc) : Value</b><br/><br/>Lookup value (values and ranges allowed) using 1-based index, return value (0 if index out of range)]]></entry>
        <entry name="lookupz" insert="lookupz(index: v1, v2..v3, etc)"><![CDATA[<b>LOOKUPZ(Index: v1, v2..v3, etc) : Value</b><br/><br/>Lookup value (values and ranges allowed) using 0-based index, return value (0 if index out of range)]]></entry>
        <entry name="lookdown" insert="lookdown(value: v1, v2..v3, etc)"><![CDATA[<b>LOOKDOWN(Value: v1, v2..v3, etc) : Index</b><br/><br/>Determine 1-based index of matching value (values and ranges allowed), return index (0 if no match)]]></entry>
        <entry name="lookdownz" insert="lookdownz(value: v1, v2..v3, etc)"><![CDATA[<b>LOOKDOWNZ(Value: v1, v2..v3, etc) : Index</b><br/><br/>Determine 0-based index of matching value (values and ranges allowed), return index (0 if no match)]]></entry>
    
        <entry name="strsize" insert="strsize(addr)"><![CDATA[<b>STRSIZE(Addr) : Size</b><br/><br/>Count bytes in zero-terminated string at Addr, return string size, not including zero terminator]]></entry>
        <entry name="strcomp" insert="strcomp(addra, addrb)"><![CDATA[<b>STRCOMP(AddrA, AddrB) : Match</b><br/><br/>Compare zero-terminated strings at AddrA and AddrB, return -1 if match or 0 if mismatch]]></entry>
        <entry name="string" insert="string(&quot;text&quot;,9)"><![CDATA[<b>STRING("Text",9) : StringAddress</b><br/><br/>Compose a zero-terminated string (quoted characters and values 1..255 allowed), return address of string]]></entry>

        <entry name="cogid"><![CDATA[<b>COGID</b><p>The current cogâ€™s ID (0-7).</p>]]></entry>
    </section>

    <section class="ConstantsNode,ExpressionNode">
        <entry name="CHIPVER">><![CDATA[<b>CHIPVER</b><p>Propeller chip version number</p>]]></entry>
        <entry name="CLKMODE"><![CDATA[<b>CLKMODE</b><p>Current clock mode setting</p>]]></entry>
        <entry name="_CLKMODE"><![CDATA[<b>_CLKMODE</b><p>Application-defined clock mode (read-only)</p>]]></entry>
        <entry name="CLKFREQ"><![CDATA[<b>CLKFREQ</b><p>Current clock frequency</p>]]></entry>
        <entry name="_CLKFREQ"><![CDATA[<b>_CLKFREQ</b><p>Application-defined clock frequency (read-only)</p>]]></entry>
        <entry name="CLKSET"><![CDATA[<b>CLKSET</b><p>Set clock mode and clock frequency</p>]]></entry>
        <entry name="_XINFREQ"><![CDATA[<b>_XINFREQ</b><p>Application-defined external clock frequency (read-only)</p>]]></entry>
        <entry name="_STACK"><![CDATA[<b>_STACK</b><p>Application-defined stack space to reserve (read-only)</p>]]></entry>
        <entry name="_FREE"><![CDATA[<b>_FREE</b><p>Application-defined free space to reserve (read-only)</p>]]></entry>
        <entry name="RCFAST"><![CDATA[<b>RCFAST</b><p>Constant for _CLKMODE : internal fast oscillator</p>]]></entry>
        <entry name="RCSLOW"><![CDATA[<b>RCSLOW</b><p>Constant for _CLKMODE : internal slow oscillator</p>]]></entry>
        <entry name="XINPUT"><![CDATA[<b>XINPUT</b><p>Constant for _CLKMODE : external clock/osc (XI pin)</p>]]></entry>
        <entry name="XTAL1"><![CDATA[<b>XTAL1</b><p>Constant for _CLKMODE : external low-speed crystal</p>]]></entry>
        <entry name="XTAL2"><![CDATA[<b>XTAL2</b><p>Constant for _CLKMODE : external med-speed crystal</p>]]></entry>
        <entry name="XTAL3"><![CDATA[<b>XTAL3</b><p>Constant for _CLKMODE : external high-speed crystal</p>]]></entry>
        <entry name="PLL1X"><![CDATA[<b>PLL1X</b><p>Constant for _CLKMODE : external frequency times 1</p>]]></entry>
        <entry name="PLL2X"><![CDATA[<b>PLL2X</b><p>Constant for _CLKMODE : external frequency times 2</p>]]></entry>
        <entry name="PLL4X"><![CDATA[<b>PLL4X</b><p>Constant for _CLKMODE : external frequency times 4</p>]]></entry>
        <entry name="PLL8X"><![CDATA[<b>PLL4X</b><p>Constant for _CLKMODE : external frequency times 8</p>]]></entry>
        <entry name="PLL16X"><![CDATA[<b>PLL4X</b><p>Constant for _CLKMODE : external frequency times 16</p>]]></entry>

        <entry name="TRUE"><![CDATA[<b>TRUE</b><p>Logical true: -1 ($FFFFFFFF)</p>]]></entry>
        <entry name="FALSE"><![CDATA[<b>TRUE</b><p>Logical false: 0 ($00000000)</p>]]></entry>
        <entry name="POSX"><![CDATA[<b>POSX</b><p>Maximum positive integer: 2,147,483,647 ($7FFFFFFF)</p>]]></entry>
        <entry name="NEGX"><![CDATA[<b>NEGX</b><p>Maximum negative integer: -2,147,483,648 ($80000000)</p>]]></entry>
        <entry name="PI"><![CDATA[<b>PI</b><p>Floating-point value for PI: ~3.141593 ($40490FDB)</p>]]></entry>
    </section>

    <section class="DatNode,DataLineNode,Instruction">
        <entry name="org"></entry>
        <entry name="fit"></entry>
        <entry name="res"></entry>
        <entry name="byte"></entry>
        <entry name="word"></entry>
        <entry name="long"></entry>
        <entry name="bytefit"></entry>
        <entry name="wordfit"></entry>

        <entry name="file"></entry>
        <entry name="include"></entry>

        <entry name="abs"></entry>
        <entry name="absneg"></entry>
        <entry name="add"></entry>
        <entry name="addabs"></entry>
        <entry name="adds"></entry>
        <entry name="addsx"></entry>
        <entry name="addx"></entry>
        <entry name="and"></entry>
        <entry name="andn"></entry>
        <entry name="call"></entry>
        <entry name="clkset"></entry>
        <entry name="cmp"><![CDATA[<b>CMP     D,{#}S   {WC/WZ}</b><p>Compare D to S.                                                  C = borrow of (D - S).              Z = (D == S).</p>]]></entry>
        <entry name="cmps"><![CDATA[<b>CMPS    D,{#}S   {WC/WZ}</b><p>Compare D to S, signed.                                          C = correct sign of (D - S).        Z = (D == S).</p>]]></entry>
        <entry name="cmpsub"></entry>
        <entry name="cmpsx"><![CDATA[<b>CMPSX   D,{#}S   {WC/WZ}</b><p>Compare D to (S + C), signed and extended.                       C = correct sign of (D - (S + C)).  Z = Z AND (D == S + C).</p>]]></entry>
        <entry name="cmpx"><![CDATA[<b>CMPX    D,{#}S   {WC/WZ}</b><p>Compare D to (S + C), extended.                                  C = borrow of (D - (S + C)).        Z = Z AND (D == S + C).</p>]]></entry>
        <entry name="cogid"></entry>
        <entry name="coginit"></entry>
        <entry name="cogstop"></entry>
        <entry name="djnz"><![CDATA[<b>DJNZ    D,{#}S</b><p>Decrement D and jump to S** if result is not zero.</p>]]></entry>
        <entry name="hubop"></entry>
        <entry name="jmp"></entry>
        <entry name="jmpret"></entry>
        <entry name="lockclr"></entry>
        <entry name="locknew"></entry>
        <entry name="lockret"></entry>
        <entry name="lockset"></entry>
        <entry name="max"></entry>
        <entry name="maxs"></entry>
        <entry name="min"></entry>
        <entry name="mins"></entry>
        <entry name="mov"><![CDATA[<b>MOV     D,{#}S   {WC/WZ}</b><p>Move S into D. D = S. C = S[31]. *</p>]]></entry>
        <entry name="movd"></entry>
        <entry name="movi"></entry>
        <entry name="movs"></entry>
        <entry name="muxc"></entry>
        <entry name="muxnc"></entry>
        <entry name="muxnz"></entry>
        <entry name="muxz"></entry>
        <entry name="neg"><![CDATA[<b>NEG     D        {WC/WZ}</b><p>Negate D.        D = -D. C = MSB of result. *</p><b>NEG     D,{#}S   {WC/WZ/WCZ}</b><p>Negate S into D. D = -S. C = MSB of result. *</p>]]></entry>
        <entry name="negc"><![CDATA[<b>NEGC    D        {WC/WZ}</b><p>Negate D by  C.        If C = 1 then D = -D, else D = D. C = MSB of result. *</p><b>NEGC    D,{#}S   {WC/WZ/WCZ}</b><p>Negate S by  C into D. If C = 1 then D = -S, else D = S. C = MSB of result. *</p>]]></entry>
        <entry name="negnc"><![CDATA[<b>NEGNC   D        {WC/WZ}</b><p>Negate D by !C.        If C = 0 then D = -D, else D = D. C = MSB of result. *</p><b>NEGNC   D,{#}S   {WC/WZ/WCZ}</b><p>Negate S by !C into D. If C = 0 then D = -S, else D = S. C = MSB of result. *</p>]]></entry>
        <entry name="negnz"><![CDATA[<b>NEGNZ   D        {WC/WZ}</b><p>Negate D by !Z.        If Z = 0 then D = -D, else D = D. C = MSB of result. *</p><b>NEGNZ   D,{#}S   {WC/WZ/WCZ}</b><p>Negate S by !Z into D. If Z = 0 then D = -S, else D = S. C = MSB of result. *</p>]]></entry>
        <entry name="negz"><![CDATA[<b>NEGZ    D        {WC/WZ}</b><p>Negate D by  Z.        If Z = 1 then D = -D, else D = D. C = MSB of result. *</p><b>NEGZ    D,{#}S   {WC/WZ/WCZ}</b><p>Negate S by  Z into D. If Z = 1 then D = -S, else D = S. C = MSB of result. *</p>]]></entry>
        <entry name="nop"><![CDATA[<b>NOP</b><p>No operation.</p>]]></entry>
        <entry name="or"></entry>
        <entry name="rcl"></entry>
        <entry name="rcr"></entry>
        <entry name="ret"></entry>
        <entry name="rev"></entry>
        <entry name="rol"></entry>
        <entry name="ror"></entry>
        <entry name="rdbyte"><![CDATA[<b>RDBYTE  D,{#}S   {WZ}</b><p>Read zero-extended byte from hub address {#}S into D.</p>]]></entry>
        <entry name="rdword"><![CDATA[<b>RDWORD  D,{#}S   {WZ}</b><p>Read zero-extended word from hub address {#}S into D.</p>]]></entry>
        <entry name="rdlong"><![CDATA[<b>RDLONG  D,{#}S   {WZ}</b><p>Read long from hub address {#}S into D.</p>]]></entry>
        <entry name="wrbyte"><![CDATA[<b>WRBYTE  {#}D,{#}S</b><p>Write byte in D[7:0] to hub address {#}S.</p>]]></entry>
        <entry name="wrword"><![CDATA[<b>WRWORD  {#}D,{#}S</b><p>Write word in D[15:0] to hub address {#}S.</p>]]></entry>
        <entry name="wrlong"><![CDATA[<b>WRLONG  {#}D,{#}S</b><p>Write long in D[31:0] to hub address {#}S.</p>]]></entry>
        <entry name="sar"></entry>
        <entry name="shl"></entry>
        <entry name="shr"></entry>
        <entry name="sub"></entry>
        <entry name="subabs"></entry>
        <entry name="subs"></entry>
        <entry name="subsx"></entry>
        <entry name="subx"></entry>
        <entry name="sumc"></entry>
        <entry name="sumnc"></entry>
        <entry name="sumnz"></entry>
        <entry name="sumz"></entry>
        <entry name="test"></entry>
        <entry name="testn"></entry>
        <entry name="tjnz"></entry>
        <entry name="tjz"></entry>
        <entry name="waitcnt"></entry>
        <entry name="waitpeq"></entry>
        <entry name="waitpne"></entry>
        <entry name="waitvid"></entry>
        <entry name="xor"><![CDATA[<b>XOR     D,{#}S   {WC/WZ}</b><p>XOR S into D.    D = D ^ S.    C = parity of result. *</p>]]></entry>
    </section>
    <section class="DatNode,DataLineNode,Condition">
        <entry name="if_never"><![CDATA[<b>IF_NEVER Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> never.</p>]]></entry>
        <entry name="if_nc_and_nz"><![CDATA[<b>IF_NC_AND_NZÂ  <inst>Â  <ops></b><p>Execute <inst> if C = 0 and Z = 0.</p>]]></entry>
        <entry name="if_nz_and_nc"><![CDATA[<b>IF_NZ_AND_NCÂ  <inst>Â  <ops></b><p>Execute <inst> if C = 0 and Z = 0.</p>]]></entry>
        <entry name="if_a"><![CDATA[<b>IF_AÂ  Â Â Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 0 and Z = 0, or if 'above' after a comparison/subtraction.</p>]]></entry>
        <entry name="if_nc_and_z"><![CDATA[<b>IF_NC_AND_Z Â  <inst>  <ops></b><p>Execute <inst> if C = 0 and Z = 1.</p>]]></entry>
        <entry name="if_z_and_nc"><![CDATA[<b>IF_Z_AND_NC Â  <inst>  <ops></b><p>Execute <inst> if C = 0 and Z = 1.</p>]]></entry>
        <entry name="if_nc"><![CDATA[<b>IF_NCÂ Â Â Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 0.</p>]]></entry>
        <entry name="if_ae"><![CDATA[<b>IF_AEÂ Â Â Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 0, or if 'above or equal' after a comparison/subtraction.</p>]]></entry>
        <entry name="if_c_and_nz"><![CDATA[<b>IF_C_AND_NZÂ Â  <inst>Â  <ops></b><p>Execute <inst> if C =Â 1 and Z = 0.</p>]]></entry>
        <entry name="if_nz_and_c"><![CDATA[<b>IF_NZ_AND_CÂ Â  <inst>Â  <ops></b><p>Execute <inst> if C =Â 1 and Z = 0.</p>]]></entry>
        <entry name="if_nz"><![CDATA[<b>IF_NZÂ Â Â Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> ifÂ Z = 0.</p>]]></entry>
        <entry name="if_ne"><![CDATA[<b>IF_NEÂ Â Â Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> ifÂ Z = 0, or if 'not equal' after a comparison/subtraction.</p>]]></entry>
        <entry name="if_c_ne_z"><![CDATA[<b>IF_C_NE_ZÂ Â Â Â  <inst>Â  <ops></b><p>Execute <inst> ifÂ C != Z.</p>]]></entry>
        <entry name="if_z_ne_c"><![CDATA[<b>IF_Z_NE_CÂ Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if C != Z.</p>]]></entry>
        <entry name="if_nc_or_nz"><![CDATA[<b>IF_NC_OR_NZÂ Â  <inst>Â  <ops></b><p>Execute <inst> if C =Â 0Â or Z = 0.</p>]]></entry>
        <entry name="if_nz_or_nc"><![CDATA[<b>IF_NZ_OR_NCÂ Â  <inst>Â  <ops></b><p>Execute <inst> if C =Â 0Â or Z = 0.</p>]]></entry>
        <entry name="if_c_and_z"><![CDATA[<b>IF_C_AND_ZÂ Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 1 and Z = 1.</p>]]></entry>
        <entry name="if_z_and_c"><![CDATA[<b>IF_Z_AND_CÂ Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 1 and Z = 1.</p>]]></entry>
        <entry name="if_c_eq_z"><![CDATA[<b>IF_C_EQ_ZÂ Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = Z.</p>]]></entry>
        <entry name="if_z_eq_c"><![CDATA[<b>IF_Z_EQ_C Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = Z.</p>]]></entry>
        <entry name="if_z"><![CDATA[<b>IF_Z Â Â Â Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if Z = 1.</p>]]></entry>
        <entry name="if_e"><![CDATA[<b>IF_E Â Â Â Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if Z = 1, or if 'equal' after a comparison/subtraction.</p>]]></entry>
        <entry name="if_nc_or_z"><![CDATA[<b>IF_NC_OR_ZÂ Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 0 or Z = 1.</p>]]></entry>
        <entry name="if_z_or_nc"><![CDATA[<b>IF_Z_OR_NCÂ Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 0 or Z = 1.</p>]]></entry>
        <entry name="if_c"><![CDATA[<b>IF_CÂ  Â Â Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> ifÂ C = 1.</p>]]></entry>
        <entry name="if_b"><![CDATA[<b>IF_B Â Â Â Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> ifÂ C = 1, or if 'below' after a comparison/subtraction.</p>]]></entry>
        <entry name="if_c_or_nz"><![CDATA[<b>IF_C_OR_NZÂ Â Â  <inst>Â  <ops></b><p>Execute <inst> if C =Â 1 or Z = 0.</p>]]></entry>
        <entry name="if_nz_or_c"><![CDATA[<b>IF_NZ_OR_CÂ Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 1 or Z = 0.</p>]]></entry>
        <entry name="if_c_or_z"><![CDATA[<b>IF_C_OR_ZÂ Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 1 or Z = 1.</p>]]></entry>
        <entry name="if_z_or_c"><![CDATA[<b>IF_Z_OR_CÂ  Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 1 or Z = 1.</p>]]></entry>
        <entry name="if_be"><![CDATA[<b>IF_BEÂ Â  Â Â Â Â Â  <inst>Â  <ops></b><p>Execute <inst> if C = 1 or Z = 1, or if 'below or equal' after a comparison/subtraction.</p>]]></entry>
        <entry name="if_always"><![CDATA[<b>IF_ALWAYSÂ Â Â Â  <inst>Â  <ops></b><p>Execute <inst> always.</p>]]></entry>
    </section>

</content>
